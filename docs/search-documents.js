var searchDocuments = {"glossary.html":{"action-uuid":"803ed9ee-2980-4bdc-b35d-a801bb1ee56f","title":"Glossary","content":"Clear Identifier(s) Hide UUID {{data.value.name}} {{data.value[0].value}} {{item.value}}"},"model/glossary.html":{"action-uuid":"f382bb88-c34e-4e00-b255-6cdc04996246","title":"Glossary","content":"Clear Identifier(s) Hide UUID {{data.value.name}} {{data.value[0].value}} {{item.value}}"},"r0/responder/index.html":{"action-uuid":"d62b9185-5e02-403e-9029-6bb2fa0a7c48","title":"Responder","content":"Generates a response from: Request Query results Generator&rsquo;s response Similar to the requestor and loader - a generic (functional) interface, inheritance hierarchy, concrete implementations as classes and utility methods: Plain text JSON or some other structure, say response model Markdown/HTML - summary, footnotes, sources."},"model/references/eClassifiers/FloatVectorStringItem/inheritance.html":{"path":"FloatVectorStringItem/Inheritance","action-uuid":"25a02418-a098-4a27-a246-9336fd15c5aa","title":"Inheritance","content":"Supertypes "},"r0/loader/index.html":{"action-uuid":"882f61c2-aaa7-4fd1-b336-cbbb6fe5845b","title":"Loader","content":"Iterates over the data source, uses key extractor to compute a key, stores to the store. The loader may perform a transformation of the data store format to an internal URI -&gt; S format where S is the argument type for the key extractors. For example, String for text embeddings. Implement as a generic (functional) interface with an inheritance hierarchy progressively binding generic parameters. Concrete implementations may be provided as static utility methods."},"r0/query-engine/index.html":{"action-uuid":"90f04ce7-9a81-4b45-a4c2-4b8308f93c67","title":"Query Engine","content":"Query engine is essentially Function&lt;K,Iterable&lt;R&gt;&gt; or BiFunction&lt;K,ProgressMonitor,Iterable&lt;R&gt;&gt; where R provides access to the source URI and possibly similarity and some metadata. Similarity can be anything including null. There might be a comparator for similarities. For example, cosine similarity comparator. For vectors take a look at https://github.com/jelmerk/hnswlib / https://mvnrepository.com/artifact/com.github.jelmerk/hnswlib-core-jdk17, take a look at embeddings4j - adapt if possible. Hnswlib provides several distance metrics with cosine distance being one of them. Hnswlib can also be used for indexing. The index may be serialized. The index can be used as a store - so provide an index store implementation which combines both an index and query engine. Implementations (solution building blocks to provide): Vector Iteration - takes a similarity computer, iterates over the store, sorts. Index - use Hnswlib, there are two index implementations Vector database, e.g. Milvus Digest - exact match, singleton list as a result Bag of words - explore what Apache OpenNLP, Smile NLP and WordNet have to offer Default/static methods: from() methods to create query engines from functions and interfaces. E.g. from iterable and similarity function. Composition - Binary operator. default and static methods. Predicate to limit. Similarity caching predicate. Flat map - expansion. E.g. neighbors of exact match. TODO: Javadoc links to modules once published Excecutor to query engine? Or parallel flag? Iterable -&gt; stream -&gt; parallel"},"model/references/eClassifiers/DoubleVectorStringItem/references/eStructuralFeatures/vector/index.html":{"path":"DoubleVectorStringItem/Attributes/vector","action-uuid":"b7d23325-177e-46b2-b6c7-cb175bb4e0aa","title":"vector","content":"Vector elements"},"r0/store/index.html":{"action-uuid":"cdfc1eae-3fb9-461c-9dac-ef83e87daa35","title":"Store","content":"Stores associations between keys and data items. Use an Ecore model for store - create model module. Implement storage by reference - use URI&rsquo;s to find source data items in the resource set. Provide implementations for: Vectors Digests - may be used for automated validation of embedding stores - digest based query shall always be a subset of a corresponding vector query. Storage as: XMI - for inspection Compressed binary - for compact storage Delivery vehicles: Local file Maven resource HTTP(S) resource Also provide implementations for a few vector databases: Milvus - it has vendor-provided Java SDK and a docker image provided by VMware"},"model/references/eClassifiers/DoubleVectorStringItem/index.html":{"action-uuid":"032448af-7041-4aa0-b128-8a1dc42bda2f","title":"DoubleVectorStringItem","content":"DoubleVectorStringStore item - a mapping of String id to a double vector."},"r0/key-extractor/index.html":{"action-uuid":"4c12e308-d2f5-4033-86dd-0d6b83b4bfbe","title":"Key Extractor","content":"Implementations: Digest - MD5 and SHA in the core module OpenAI/Azure in the open-ai module using Azure OpenAI Java API - Azure OpenAI client library for Java | Microsoft Learn, Maven Central Open source models like Llama 2, MPT-7B, &hellip; Generic REST API in the core module Bag of words, word2vec and other things provided by Apache OpenNLP and Smile NLP possibly in combination with WordNet"},"r0/generator/index.html":{"action-uuid":"7bb6e751-f83c-42a7-bb67-f34c2e80e3cd","title":"Generator","content":"Implementations: OpenAI summarization with prompts and chains of thought using the open-ai module using Azure OpenAI Java API - Azure OpenAI client library for Java | Microsoft Learn, Maven Central Generic REST API in the core module Open source models like Llama 2, MPT-7B, &hellip;"},"model/references/eClassifiers/FloatVectorStringItem/index.html":{"action-uuid":"551d4821-ad89-4477-a5c3-0f23c849bbdd","title":"FloatVectorStringItem","content":"FloatVectorStringStore item - a mapping of String id to a float vector."},"r0/data-sources/index.html":{"action-uuid":"6e7e0337-c3da-4dc9-9801-14014a4bc3f4","title":"Data Sources","content":"Data sources contain data items. A data item is anything from which one or more keys can be extracted: Text Image Graph PDF, HTML, Markdown - a graph of text nodes (sections/paragraphs/sentences) Formatted text - a tree of text nodes (paragraphs/sentences) Source files such as Java - parse tree Drawio diagrams - diagram elements may have label text node, tooltip text node/graph, documentation text nodes/graph OCR Json Ecore models (which includes drawio diagrams) A data source may be implemented as: File system Zip archive Source repository (Git, GitHub, GitLab). gitlab4j-api and GitLab model built on top of it may be used to retrieve items from GitLab. (REST) API Maven repositories Relational databases &hellip; Ecore resources and resource factories may be used as an abstraction layer to represent all types of data sources and data items as Ecore resources in which all elements are identified by URI&rsquo;s: URI converters and handlers allow to load from different storage formats. For example, a custom URI handler for gitlab URI scheme may load from a GitLab server using REST API without cloning repositories, maven URI handler may load from Maven repositories/archives. Resource factories may be used to load resources differently based on extensions. For example: md extension would be treated as a Markdown file - convert to HTML and then use HTML loader to convert to some internal implementation. Nasdanika provides resource factories for Drawio diagrams and Excel files. html and htm extensions would be handled by an HTML factory which may parse HTML using Jsoup and then structure HTML contents into sections using H tag hierarchy, then to paragraphs and sentences. It may compute cross-references between files (resources) and parts of the document. These cross-references may be taken into account when computing similarity. Ecore resource set do not provide functionality for iterating over different storage systems, they load resources from URI&rsquo;s using resource factories. As such, the data source ecosystem would include the following: Storage navigators implementing Iterable&lt;URI&gt;1 URI handlers for URI&rsquo;s which can be loaded as streams (files). Resources and resource factories. Depending on a resource type, resources can be loaded from streams delegating to URI handlers to open them. Or they may use custom logic to load a resource. For example, JDBC to load from a relational database. The data sources ecosystem doesn&rsquo;t have to be RAG-specific - it can be used for other purposes as well. For example, for reasoning. Reasoning and RAG might be combined with RAG/AI rules in which conclusions may be used as prompts/chains of thought. Roadmap Create a common module for common functionality. Implement storage navigators for: File system Zip archives Generic REST API - GET to list directories and download resources. Token based authentication. Implement resources and resource factories for: HTML using [Jsoup](https://jsoup.org/ and HTML model PDF using Apache PDFBox Markdown using MarkdownHelper Plain text. Use String for sentences. For plain text use List of strings for paragraphs. Resources shall implement lookup by URI fragment. For example, line/column number for plain text and markdown, CSS path for HTML, TBD for PDF. EMF URI â†©"},"r0/requestor/index.html":{"action-uuid":"92ab5cb1-cf77-41b3-82de-e66b914225dc","title":"Requestor","content":"Takes a request and orchestrates other components. Implement similar to Loader - a generic (functional) interface with an inheritance hierarchy which progressively binds generic parameters. Concrete implementations as classes or utility methods."},"model/references/eClassifiers/DoubleVectorStringStore/references/eStructuralFeatures/items/index.html":{"path":"DoubleVectorStringStore/References/items","action-uuid":"5affcbbf-acbd-4077-80dc-7af909de4a5a","title":"items","content":"Store items"},"model/references/eClassifiers/DoubleVectorStringItem/inheritance.html":{"path":"DoubleVectorStringItem/Inheritance","action-uuid":"afb2730b-953b-43c9-b54d-d63b1a5a9c3b","title":"Inheritance","content":"Supertypes "},"index.html":{"action-uuid":"a7856eb4-60ec-4442-b22c-9dc6b198711b","title":"Retrieval Augmented Generation","content":"Nasdanika RAG is a retrieval augmented generation framework in Java. The goal of the framework is to provide Java developers means to assemble RAG designs which match their tasks at hand. The framework takes Capability, Architecture/Solution building blocks approach. Architecture building blocks provide one or more capability, solution building blocks implement one or more architecture building blocks. One of definitions of software development is &ldquo;the process of incremental binding of decisions to make them executable&rdquo;. This framework follows this paradigm - it defines high-level generic abstractions then progressively binds generic parameters and then concrete implementations. The diagram above depicts the architecture building blocks. The below diagram shows how the building blocks interact during loading and retrieval/generation phases. hide footbox actor User [[r0/user/index.html]] boundary Requestor [[r0/requestor/index.html]] participant queryEngine as &quot;Query Engine&quot; [[r0/query-engine/index.html]] participant Generator [[r0/generator/index.html]] participant Responder [[r0/responder/index.html]] participant keyExtractor as &quot;Key Extractor&quot; [[r0/key-extractor/index.html]] participant Loader [[r0/loader/index.html]] database dataSources as &quot;Data Sources&quot; [[r0/data-sources/index.html]] database Store [[r0/store/index.html]] group Load Loader -&gt; dataSources : read Loader -&gt; keyExtractor : generate key Loader -&gt; Store : store end group Retrieve &amp; Generate User -&gt; Requestor : question Requestor -&gt; queryEngine : query queryEngine -&gt; keyExtractor : generate query key queryEngine -&gt; Store : get matches queryEngine -&gt; queryEngine : sort by similarity queryEngine --&gt; Requestor : sorted store entries Requestor -&gt; Generator : question and query results Generator --&gt; Requestor : summary Requestor -&gt; Responder : question, query results, summary Responder --&gt; User : answer end For each architecture building block there may be multiple solution building blocks. A combination of compatible solution building blocks is called a &ldquo;design&rdquo; or &ldquo;embodiment&rdquo;. Solution building blocks for the same architecture building block may be chained and composed to produce new solution building blocks. The following sections provide brief overviews of the architecture building blocks. Click on the diagram elements or use the left navigation or links to navigate to the blocks&rsquo; pages with more detailed information and a list of solution building blocks. Data Sources Sources of data. There might be multiple solution building blocks with two primary design dimensions: Data item format - PDF, HTML, JSON, diagram, Ecore model, PNG, JPEG &hellip; Data storage interface - file system, zip archive, (REST) API, &hellip; Data items can be converted from one format to another. As such data sources can be chained and composed. Loader Loads data items keys and some data item identifier/locator to the store to make them discoverable by the query engine. Store Contains associations between data item keys and data items. Data items can be stored by value or by reference. The store can be indexed. A vector database is an example of an indexed store of embedding vectors. Key Extractor Takes a data item of a fragment of it (say a paragraph from a text document) and computes a key. The key is something that identifies the data item. Some key types may support similarity computation. Examples of keys: Text: MD5/SHA digest - exact matches Vector embeddings - cosine similarity Bags of words - overlap similarity Person Postal address - distance similarity DNA - shared DNA Marital and social networks relationships - distance Query Engine Computes query key and retrieves matching items from the store sorted by similarity. Requestor Takes a request, passes to the query engine. Then uses the request and the query results to formulate a request to the generator. For example, if the generator is an LLM, it would create prompts or chains of thought from the query results. Then it passes the request, the query results, and the response from the generator to the responder. Generator Creates a summary response from a request and query results. This component might not be present in some embodiments. E.g. in the case of Semantic Search the Responder will generate a response. Responder Takes the request, query results, generator response and creates a response for the user. User A user (client) of a RAG solution - a human or a system. Roadmap Java Core module Ecore model Processors - ecore, doc, factories Drawio mapping Eclipse tree editor Eclipse Sirius designer AI models - Claude antroipic, Orca-2, &hellip; Caching implementations for query engine, key extractor, and generator: Memory-sensitive cache based on Apache Commons Pool Hazelcast based cache. Can be used in conjunction with Hazecast Docker Image Other implementations as needed, e.g. RDBMS -&gt; H2, &hellip; User feedback collection - ranking of answers, providing the right answer (and then use similarity to choose the best of available) Benchmarking User A user (client) of a RAG solution - a human or a system Data Sources Sources of data items - HTML pages, PDF files, databases, OCR JSON's, diagrams, ... Store Key Extractor Computes store/retrieval key. For example, a vector embedding. Key may have a measure of similarity. For example, cosine similarity for vectors Query Engine Takes a request and uses the key extractor to compute a request key. Then uses the key to retrieve matching items from the store. If the key type supports similarity computation, then orders results by similarity. May index store entries for faster retrieval. Requestor Takes a request, passes to the query engine. Then uses the request and the query results to formulate a request to the generator. For example, if the generator is an LLM, it would create prompts or chains of thought from the query results. Then it passes the request, the query results, and the response from the generator to the responder. Responder Takes the request, query results, generator response and creates a response for the user. Generator Creates a summary response from a request and query results. This component might not be present in some embodiments. E.g. in the case of Semantic Search the Responder will generate a response. Loader Loads data items from data sources to a store for subsequent retrieval. May store by value or by references. May create multiple store entries per data item. For example, it may break down a PDF/HTML documents into sections and then into paragraphs and create entries per paragraph. May also index entries by the key. User A user (client) of a RAG solution - a human or a system Data Sources Sources of data items - HTML pages, PDF files, databases, OCR JSON's, diagrams, ... Store Key Extractor Computes store/retrieval key. For example, a vector embedding. Key may have a measure of similarity. For example, cosine similarity for vectors Query Engine Takes a request and uses the key extractor to compute a request key. Then uses the key to retrieve matching items from the store. If the key type supports similarity computation, then orders results by similarity. May index store entries for faster retrieval. Requestor Takes a request, passes to the query engine. Then uses the request and the query results to formulate a request to the generator. For example, if the generator is an LLM, it would create prompts or chains of thought from the query results. Then it passes the request, the query results, and the response from the generator to the responder. Responder Takes the request, query results, generator response and creates a response for the user. Generator Creates a summary response from a request and query results. This component might not be present in some embodiments. E.g. in the case of Semantic Search the Responder will generate a response. Loader Loads data items from data sources to a store for subsequent retrieval. May store by value or by references. May create multiple store entries per data item. For example, it may break down a PDF/HTML documents into sections and then into paragraphs and create entries per paragraph. May also index entries by the key."},"model/references/eClassifiers/FloatVectorStringStore/references/eStructuralFeatures/items/index.html":{"path":"FloatVectorStringStore/References/items","action-uuid":"71327676-9390-4acd-abee-6bbc2a96fcc5","title":"items","content":"Store items"},"model/references/eClassifiers/FloatVectorStringStore/index.html":{"action-uuid":"bd4a80b2-9621-4e4d-9f3c-1ea767c53c46","title":"FloatVectorStringStore","content":"Stores float vectors identified by strrings (URI&rsquo;s)"},"model/search.html":{"action-uuid":"74eb205c-8bbd-494f-8305-87fc7eeaba3e","title":"Search","content":"Clear"},"model/references/eClassifiers/DoubleVectorStringStore/index.html":{"action-uuid":"d27284e7-16e5-48cf-b6d4-4f9b061e2b5e","title":"DoubleVectorStringStore","content":"Stores double vectors identified by strrings (URI&rsquo;s)"},"model/references/eClassifiers/FloatVectorStringItem/references/eStructuralFeatures/vector/index.html":{"path":"FloatVectorStringItem/Attributes/vector","action-uuid":"dcedb229-f4e6-44f9-9e21-a259abb11c82","title":"vector","content":"Vector elements"}}