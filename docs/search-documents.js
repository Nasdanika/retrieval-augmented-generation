var searchDocuments = {"r0/requestor/index.html":{"action-uuid":"bc5d1ddc-7faa-48b5-96c9-7cd9d0de372f","title":"Requestor","content":"TODO"},"glossary.html":{"action-uuid":"b1dd3649-c5ef-4989-8ee7-718ec0773129","title":"Glossary","content":"Clear Identifier(s) Hide UUID {{data.value.name}} {{data.value[0].value}} {{item.value}}"},"r0/responder/index.html":{"action-uuid":"19ce36ca-5390-4e97-8028-af2af3a75572","title":"Responder","content":"TODO"},"r0/loader/index.html":{"action-uuid":"30188c17-d70a-421f-99b4-d0e859a2b46c","title":"Loader","content":"TODO"},"r0/query-engine/index.html":{"action-uuid":"114f92ea-3385-46f0-9a1c-49c8f81a493a","title":"Query Engine","content":"TODO"},"r0/store/index.html":{"action-uuid":"fb5e326f-eb76-4d32-9aed-ff12cb25c9b3","title":"Store","content":"TODO"},"index.html":{"action-uuid":"c03e10e2-fbf7-48c8-be57-e50c147a0b1f","title":"Retrieval Augmented Generation","content":"Nasdanika RAG is a retrieval augmented generation framework in Java. The goal of the framework is to provide Java developers means to assemble RAG designs which match their tasks at hand. The framework takes Capability, Architecture/Solution building blocks approach. Architecture building blocks provide one or more capability, solution building blocks implement one or more architecture building blocks. The diagram below depicts architecture building blocks. For each architecture building block there may be multiple solution building blocks. A combination of compatible solution building blocks is called a &ldquo;design&rdquo; or &ldquo;embodiment&rdquo;. Solution building blocks for the same architecture building block may be chained and composed to produce new solution building blocks. ddd hide footbox actor User boundary Requestor participant queryEngine as &quot;Query Engine&quot; participant Generator participant Responder participant keyExtractor as &quot;Key Extractor&quot; participant Loader database dataSources as &quot;Data Sources&quot; database Store group Load Loader -&gt; dataSources : read Loader -&gt; keyExtractor : generate key Loader -&gt; Store : store end group Retrieve &amp; Generate User -&gt; Requestor : question Requestor -&gt; queryEngine : query queryEngine -&gt; keyExtractor : generate query key queryEngine -&gt; Store : get matches queryEngine -&gt; queryEngine : sort by similarity queryEngine --&gt; Requestor : sorted store entries Requestor -&gt; Generator : question and query results Generator --&gt; Requestor : summary Requestor -&gt; Responder : question, query results, summary Responder --&gt; User : answer end User A user (client) of a RAG solution - humann or system Data Sources Sources of data items - HTML pages, PDF files, databases, OCR JSON's, diagrams, ... Store Key Extractor Computes store/retrieval key. For example, a vector embedding. Key may have a measure of similarity. For example, cosine similarity for vectors Query Engine Takes a request and uses the key extractor to compute a request key. Then uses the key to retrieve matching items from the store. If the key type supports similarity computation, then orders results by similarity. May index store entries for faster retrieval. Requestor Takes a request, passes to the query engine. Then uses the request and the query results to formulate a request to the generator. For example, if the generator is an LLM, it would create prompts or chains of thought from the query results. Then it passes the request, the query results, and the response from the generator to the responder. Responder Takes the request, query results, generator response and creates a response for the user. Generator Creates a summary response from a request and query results. This component might not be present in some embodiments. E.g. in the case of Semantic Search the Responder will generate a response. Loader Loads data items from data sources to a store for subsequent retrieval. May store by value or by references. May create multiple store entries per data item. For example, it may break down a PDF/HTML documents into sections and then into paragraphs and create entries per paragraph. May also index entries by the key. User A user (client) of a RAG solution - humann or system Data Sources Sources of data items - HTML pages, PDF files, databases, OCR JSON's, diagrams, ... Store Key Extractor Computes store/retrieval key. For example, a vector embedding. Key may have a measure of similarity. For example, cosine similarity for vectors Query Engine Takes a request and uses the key extractor to compute a request key. Then uses the key to retrieve matching items from the store. If the key type supports similarity computation, then orders results by similarity. May index store entries for faster retrieval. Requestor Takes a request, passes to the query engine. Then uses the request and the query results to formulate a request to the generator. For example, if the generator is an LLM, it would create prompts or chains of thought from the query results. Then it passes the request, the query results, and the response from the generator to the responder. Responder Takes the request, query results, generator response and creates a response for the user. Generator Creates a summary response from a request and query results. This component might not be present in some embodiments. E.g. in the case of Semantic Search the Responder will generate a response. Loader Loads data items from data sources to a store for subsequent retrieval. May store by value or by references. May create multiple store entries per data item. For example, it may break down a PDF/HTML documents into sections and then into paragraphs and create entries per paragraph. May also index entries by the key."},"r0/key-extractor/index.html":{"action-uuid":"9d986f61-9363-4bf9-bdaa-519b636d6f3a","title":"Key Extractor","content":"TODO"},"r0/generator/index.html":{"action-uuid":"f30eb07f-fd32-45e3-9df0-c5952ad876d3","title":"Generator","content":"TODO"},"r0/data-sources/index.html":{"action-uuid":"06612c81-2b4f-4a0b-8317-ee6a1e181d30","title":"Data Sources","content":"TODO - different sources, internal structure"}}